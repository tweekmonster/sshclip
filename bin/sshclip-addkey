#!/bin/bash
keyopts="no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-X11-forwarding"

bail() {
    >&2 echo "${*}"
    exit 1
}

yn() {
    read -n 1 -p "$1" -r choice

    if [[ -z "$choice" && -n "$2" ]]; then
        echo $2
    fi

    case $choice in
        y:Y)
            echo "y"
            ;;
        n:N)
            echo "n"
            ;;
        *)
            yn "$1" "$2"
            ;;
    esac
}

if [[ $UID -ne 0 ]]; then
    bail "You will need to run this as root"
fi

sshclip_home=$(getent passwd sshclip | cut -d: -f6)
if [[ -z "$sshclip_home" ]]; then
    bail "Could not find sshclip home"
fi

sshclip_ssh="${sshclip_home}/.ssh"
if [[ ! -d "$sshclip_ssh" ]]; then
    mkdir -p "$sshclip_ssh"
    chmod 700 "$sshclip_ssh"
    touch "${sshclip_ssh}/authorized_keys"
    chown sshclip:nogroup "${sshclip_ssh}/authorized_keys"
    chmod 400 "${sshclip_ssh}/authorized_keys"
fi

pubkey=""

if [[ -z "$pubkey" ]]; then
    echo "Enter one public key per line and press ctrl-d to finish:"
    echo ""
    pubkey=$(cat)
fi

if [[ -z "$pubkey" ]]; then
    bail "No public key supplied"
fi

IFS=$'\n'
user=""

echo ""
read -p "If you don't want this key to sandboxed, enter a user name: " -r user
user=$(echo "$user" | xargs)
if [[ -n "$user" ]]; then
    keyopts="command=\"user \\\"${user}\\\"\",${keyopts}"
fi

tmpfile=$(mktemp)
for line in $pubkey; do
    echo "$line" > "$tmpfile"
    ssh-keygen -lf "$tmpfile"

    if [[ $? -eq 0 ]]; then
        keytest=$(echo "$line" | cut -f1,2 -d " ")
        grep -q "$keytest" "${sshclip_ssh}/authorized_keys"
        if [[ $? -eq 1 ]]; then
            echo "${keyopts} $line" >> "${sshclip_ssh}/authorized_keys"
        else
            echo "Key already exists"
        fi
    else
        echo "Not a key: $line"
    fi
done

rm -f "$tmpfile"

# vim: set ts=4 sw=4 tw=0 et :
