#!/usr/bin/env bash
name="${BASH_SOURCE[0]##*/}"
readonly max_bytes=262144  # 256 KiB, which is already a lot for text
action=""
store=""
passthru=1
mode=0
background=0
use_encryption=1
vim=0
sshcmd=${SSHCLIP_SSHCMD:-"ssh sshclip-server"}
cache="$HOME/.cache/sshclip"
pidfile="$cache/monitor.pid"
crcfile="$cache/system_clipboard_crc"

# See setup_filters() below
keyfile="$cache/.sshclip_key"
encoder="base64"
decoder="base64 --decode"

if [[ ! -d "$cache" ]]; then
    mkdir -p "$cache"
fi


show_help() {
    cat <<EOF
sshclip-client [--impersonate [osx xclip xsel]] [-h]

Options:
    -h                  This thing here
    --impersonate       Create symlinks that impersonates another clipboard
                        program. Options are: osx, xclip, xsel, and sshclip.
    --no-passthru       Don't attempt to pass yoinks to the system's clipboard.
    --monitor           Monitor the system's clipboard to keep it in sync.
    --background        Run the script in the background.
    --no-encryption     Disable encryption.

This script is a client for sshclip-server which acts as a personal clipboard
server that can be accessed over the network. The goal is to have a clipboard
program for Vim users that often have to work across multiple remote servers.

Recommended setup:

Generate a public/private key pair to authenticate with the server. Using
password authentication would be annoying if it worked in Vim.

    ssh-keygen -t rsa -b 2048 -N '' -f ~/.ssh/id_sshclip -C "sshclip@${HOST}"

Configure the server in ~/.ssh/config with multiplexing for faster
connections.

    Host sshclip-server
        Name example.com
        User sshclip
        IdentityFile ~/.ssh/id_sshclip
        ControlMaster auto
        ControlPersist 10m
        ControlPath ~/.ssh/control/sshclip-server

sshclip-server can be copied to your server and set as the shell for an
unprivileged, passwordless account.
EOF
    exit 1
}


bail() {
    >&2 echo "$1"
    exit 1
}


setup_filters() {
    # Using base64 to ensure data isn't mangled in transport
    # sshclip-server strips what it recieves of non-printable characters
    # If .sshclip_key exists and is not world readable, use aes-256 encryption
    if [[ $use_encryption -eq 1 ]]; then
        [[ ! -f "$keyfile" ]] && bail "$keyfile does not exist!  Disable encryption or set it up by using :SSHClipKey in Vim."
        [[ -n $(find "$keyfile" -perm +0006) ]] && bail "$keyfile is world readable!!!"
        encoder="openssl aes-256-cbc -a -salt -pass file:$keyfile"
        decoder="openssl aes-256-cbc -a -d -salt -pass file:$keyfile"
    fi
}


resolve_links() {
    file="$1"
    cd $(dirname "$file")
    file=$(basename "$file")
    i=0
    while [ -L "$file" ]; do
        file=$(readlink "$file")
        cd "$(dirname "$file")"
        file=$(basename "$file")

    done
    echo "$(pwd -P)/${file}"
}


find_system_clipboard() {
    # First argument is a boolean flag indicating we want the bin that
    # retrieves the clipboard.
    #
    # This function is due to my ignorance of other system clipboards.
    # This should be replaced by hard coded paths. I can't think of any reason
    # the system clipboard programs would be in different locations.
    paste="$1"
    self=$(resolve_links "${BASH_SOURCE[0]}")
    found=""
    clipboards=("pbcopy xclip xsel")
    for prog in $clipboards; do
        for item in $(which -a "$prog"); do
            item=$(resolve_links "$item")
            if [[ "$item" != "$self" ]]; then
                found=$item
                break 2
            fi
        done
    done

    if [[ -n "$found" ]]; then
        found_name=$(basename "$found")
        found_args="-i"

        case $found_name in
            pbcopy)
                found_args=""
                [[ -n "$paste" ]] && found="${found/%pbcopy/pbpaste}"
                ;;
            xclip|xsel)
                [[ -n "$paste" ]] && found_args="-o"
                if [[ "$found_name" == "xsel" ]]; then
                    case $store in
                        clipboard)
                            found_args="$found_args -b"
                            ;;
                        primary)
                            found_args="$found_args -p"
                            ;;
                        secondary)
                            found_args="$found_args -s"
                            ;;
                    esac
                fi
                ;;
        esac

        cb_cmd="$found $found_args"
        echo "${cb_cmd// /}"
    fi
}


strip_vim_header() {
    # This would be called in a subshell, and the bash subshell strips trailing
    # whitespace. This assumes the caller is aware of this.
    local data="$1"
    if [[ $vim -eq 0 ]]; then
        i=$(expr index "$data" ":")
        if [[ $i -le 5 ]]; then
            case ${data:0:1} in
                v|V|b|$'\x16')
                    data=${data:$i}
                    ;;
            esac
        fi
    fi
    echo -n "$data"
}


send_clipboard() {
    [[ $passthru -eq 1 ]] && passthru_cmd=$(find_system_clipboard)
    if [[ -n "$passthru_cmd" && "$store" == "clipboard" ]]; then
        o_vim=$vim
        vim=0
        data=$(strip_vim_header "$(cat "$1"; echo -n '%')")
        data=${data:0:(${#data}-1)}
        vim=$o_vim
        echo -n "$data" | cksum > "$crcfile"
        echo -n "$data" | "$passthru_cmd"
    fi

    head -c $max_bytes "$1" | $encoder | $sshcmd "put $store"
    rm "$1"
}


do_clipboard() {
    if [[ -z "$action" ]]; then
        show_help
        exit 1
    fi


    case $store in
        clipboard|primary|secondary)
            ;;
        *)
            bail "Incorrect store, use: clipboard, primary, or secondary"
            ;;
    esac

    case $action in
        put)
            tmpfile=$(mktemp "$cache/send.XXXXXXXXXX")
            cat > "$tmpfile"
            if [[ $mode -ne 1 && $background -eq 1 ]]; then
                # Allow the script to immediately exit to avoid sluggish
                # feedback in Vim.
                (send_clipboard "$tmpfile") &
                disown  # nohup doesn't seem to work
            else
                send_clipboard "$tmpfile"
            fi
            ;;
        get)
            data=$(strip_vim_header "$($sshcmd "get ${store}" | $decoder; echo -n "%")")
            echo -n "${data:0:(${#data}-1)}"
            ;;
        *)
            bail "Uknown action: ${action}"
            ;;
    esac
}


check_sessions() {
    # Check to see if there are running Vim or NeoVim processes and quit if
    # there are none running.
    running=$(ps -u $USER -o comm | grep 'vim' | xargs basename)
    count=0
    for name in $running; do
        [[ "$name" == "vim" || "$name" == "nvim" ]] && (( count+=1 ))
    done

    if [[ $count -eq 0 ]]; then
        exit 0
    fi
}


monitor() {
    monitor_run=1
    monitor_tmpfile=$(mktemp "$cache/clipboard_tmp.XXXXXXXXXX")

    trap "rm -f '${pidfile}' '${monitor_tmpfile}' '${crcfile}'" EXIT

    store="clipboard"
    action="put"
    sys_clipboard_get=$(find_system_clipboard 1)

    if [[ -z "$sys_clipboard_get" ]]; then
        bail "System clipboard not found"
    fi

    while [[ monitor_run -eq 1 ]]; do
        # Not sure if the following will cause problems for other systems.
        # Conversion of \r to \n is for programs that still haven't updated their
        # code to recognize that \r is not the line ending for OS X.
        # *cough*synergy*cough*
        $sys_clipboard_get | tr "\r" "\n" > "$monitor_tmpfile"
        # contents=$($sys_clipboard_get | tr "\r" "\n")
        crc=$(cat "$monitor_tmpfile" | cksum)
        if [[ -f "$crcfile" ]]; then
            outside_crc=$(cat "$crcfile")
            rm "$crcfile"
            [[ "$crc" == "$outside_crc" ]] && sys_clipboard_crc="$outside_crc"
        fi

        if [[ "$crc" != "$sys_clipboard_crc" ]]; then
            sys_clipboard_crc="$crc"
            cat "$monitor_tmpfile" | do_clipboard
        fi
        contents=""
        sleep 0.5

        # Random check of running Vim processes
        (( $RANDOM % 50 == 0 )) && check_sessions
    done
}


impersonate() {
    dir="${HOME}/bin"
    real=$(resolve_links "${BASH_SOURCE[0]}")
    links=()

    case $1 in
        osx)
            links=(
                "${dir}/pbcopy"
                "${dir}/pbpaste"
            )
            ;;
        sshclip)
            links=(
                "${dir}/sshclip-get"
                "${dir}/sshclip-put"
            )
            ;;
        xclip)
            links=(
                "${dir}/xclip"
            )
            ;;
        xsel)
            links=(
                "${dir}/xsel"
            )
            ;;
        *)
            bail "Impersonate options: osx, xclip, or xsel"
            ;;
    esac

    for link in  ${links[@]}; do
        echo "Linking $link"
        ln -s "$real" "$link"
    done

    echo "Created symlinks for $1"
}


parse_args() {
    while [[ $# > 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                ;;
            -i*)
                action="put"
                ;;
            -o*)
                action="get"
                ;;
            -sel*)
                store="${2}"
                shift
                ;;
            -b|--clipboard)
                store="clipboard"
                ;;
            -p|--primary)
                store="primary"
                ;;
            -s|--secondary)
                store="secondary"
                ;;
            --no-passthru)
                passthru=0
                ;;
            --impersonate)
                if [[ $name != "sshclip-client" ]]; then
                    bail "Use sshclip-client to impersonate another program"
                fi

                impersonate $2
                exit 0
                ;;
            --monitor)
                mode=1
                ;;
            --kill)
                mode=2
                ;;
            --bg|--background)
                background=1
                ;;
            --no-encryption)
                use_encryption=0
                ;;
            --vim)
                vim=1
                ;;
        esac
        shift
    done
}


if [[ $1 == "--impersonate" ]]; then
    if [[ $name != "sshclip-client" ]]; then
        bail "Use sshclip-client to impersonate another program"
    fi

    impersonate $2
    exit 0
fi

parse_args $@
setup_filters


if [[ $mode -gt 0 ]]; then
    if [[ $mode -eq 1 ]]; then
        if [[ -e "$pidfile" ]]; then
            kill -s 0 `cat $pidfile` && bail "Another instance is running"
        fi

        if [[ $background -eq 1 ]]; then
            monitor &
            echo -n $! > "$pidfile"
            disown
        else
            echo -n $$ > "$pidfile"
            monitor
        fi
    elif [[ $mode -eq 2 ]]; then
        if [[ -e "$pidfile" ]]; then
            running_pid=$(cat $pidfile)
            >&2 echo "Killing ${running_pid}"
            kill -s 15 $running_pid
            exit 0
        else
            bail "Not running"
        fi
    fi

    exit 0
fi


case $name in
    pbcopy)
        action="put"
        store="clipboard"
        ;;
    pbpaste)
        action="get"
        store="clipboard"
        ;;
    sshclip-get)
        action="get"
        [[ -z "$store" ]] && store="clipboard"
        ;;
    sshclip-put)
        action="put"
        [[ -z "$store" ]] && store="clipboard"
        ;;
    xclip|xsel|sshclip-client)
        ;;
    *)
        bail "Not sure how to read arguments"
        ;;
esac


do_clipboard

# vim: set ts=4 sw=4 tw=0 et :
